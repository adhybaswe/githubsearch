{"version":3,"sources":["components/Repo.js","components/Loading.js","App.js","actions/githubActions.js","serviceWorker.js","reducers/githubReducer.js","reducers/rootReducer.js","store.js","index.js"],"names":["Repo","data","useSelector","state","githubReducer","className","datas","map","value","index","key","name","Loading","active","App","dispatch","useDispatch","React","useState","user","setUser","type","placeholder","onChange","e","target","onClick","axios","get","then","response","payload","catch","error","fetchUser","loading","message","Boolean","window","location","hostname","match","initState","combineReducers","action","middleware","applyMiddleware","thunk","store","createStore","rootReducer","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"0QAoBeA,EAjBF,WAEZ,IAAMC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAExC,OACC,yBAAKC,UAAU,cAENJ,EAAKK,MAAMC,KAAK,SAACC,EAAMC,GACrB,OACE,yBAAKC,IAAKD,EAAOJ,UAAU,QAAQG,EAAMG,WCHzCC,EAPC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEjB,OACE,yBAAKR,UAAWQ,EAAS,SAAW,MC8BxBC,MA5Bf,WAEE,IAAMC,EAAWC,cACXf,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,iBAH3B,EAIUa,IAAMC,SAAS,IAJzB,mBAINC,EAJM,KAIDC,EAJC,KAUb,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,eACb,kDACA,2BAAOgB,KAAK,OAAOC,YAAY,YAAYd,MAAOW,EAAMI,SAAW,SAACC,GAAD,OAAOJ,EAAQI,EAAEC,OAAOjB,UAC3F,4BAAQkB,QATK,WACjBX,ECQqB,SAACI,GACtB,OAAO,SAASJ,GACZA,EArBE,CACFM,KAAM,yBAqBNM,IAAMC,IAAN,uCAA0CT,EAA1C,WACCU,MAAK,SAAAC,GACFf,EAlBF,CACFM,KAAM,uBACNU,QAgB0BD,OAEzBE,OAAM,SAAAC,GACHlB,EAdF,CACFM,KAAM,qBACNU,QAYwBE,EAAMH,SAAS7B,WDhBlCiC,CAAUf,KAQcd,UAAU,OAAvC,UACA,kBAAC,EAAD,CAASQ,OAAQZ,EAAKkC,UACtB,kBAAC,EAAD,MAEgB,MAAdlC,EAAKgC,MACL,yBAAK5B,UAAU,SAASJ,EAAKgC,MAAMG,SACjC,iCEhBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BClBAC,EAAY,CACfP,SAAU,EACV7B,MAAO,GACP2B,MAAQ,MCAIU,cAAgB,CAC9BvC,cDEc,WAAgC,IAA/BD,EAA8B,uDAAtBuC,EAAWE,EAAW,uCAC3C,OAAQA,EAAOvB,MACd,IAAK,uBACH,OAAO,2BACFlB,GADL,IAEEgC,SAAS,EACTF,MAAQ,OAEZ,IAAK,uBACH,MAAQ,CACNE,SAAS,EACT7B,MAAQsC,EAAOb,QAAQ9B,KACvBgC,MAAQ,MAEZ,IAAK,qBACH,MAAQ,CACNE,SAAS,EACT7B,MAAQ,GACR2B,MAAQW,EAAOb,SAEnB,QACM,OAAO5B,MEvBX0C,EAAaC,YAAgBC,KAC7BC,EAAQC,YAAYC,EAAaL,GCGvCM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,IAAD,CAAUL,MAAOA,GACd,kBAAC,EAAD,OAFJ,KAKAM,SAASC,eAAe,SJqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACL4B,QAAQ5B,MAAMA,EAAMG,c","file":"static/js/main.9a1e6106.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst Repo = () => {\r\n\r\n\tconst data = useSelector(state => state.githubReducer)\r\n\r\n\treturn(\r\n\t\t<div className=\"list-repos\">\r\n\t        {\r\n\t          data.datas.map( (value,index) => {\r\n\t            return(\r\n\t              <div key={index} className=\"repo\">{value.name}</div>\r\n\t            )\r\n\t          })\r\n\t        }\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Repo","import React from 'react'\r\n\r\nconst Loading = ({active}) => {\r\n\r\n\treturn(\r\n\t\t <div className={active ? \"loader\" : \"\"}></div>\r\n\t)\r\n}\r\n\r\nexport default Loading","import React from 'react';\nimport './App.css';\nimport { useDispatch, useSelector } from 'react-redux'\nimport { fetchUser } from './actions/githubActions';\nimport Repo from './components/Repo' \nimport Loading from './components/Loading' \n\nfunction App() {\n\n  const dispatch = useDispatch()\n  const data = useSelector(state => state.githubReducer)\n  const [user,setUser] = React.useState('')\n\n  const onProccess = () => {\n    dispatch(fetchUser(user))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"search-form\">\n        <h1>Search Github User</h1>\n        <input type=\"text\" placeholder=\"Search...\" value={user} onChange={ (e) => setUser(e.target.value) } />\n        <button onClick={onProccess} className=\"btn\">Search</button>\n        <Loading active={data.loading} />\n        <Repo />\n        {\n          data.error != null ? \n          <div className=\"error\">{data.error.message}</div>\n          : <div></div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios'\r\n\r\nexport const fetchLoading = ()=>{\r\n    return{\r\n        type: 'FETCH_GITHUB_LOADING'\r\n    }\r\n}\r\n\r\nexport const fetchSuccess = (data)=>{\r\n    return{\r\n        type: 'FETCH_GITHUB_SUCCESS',\r\n        payload : data\r\n    }\r\n}\r\n\r\nexport const fetchError = (message)=>{\r\n    return{\r\n        type: 'FETCH_GITHUB_ERROR',\r\n        payload : message\r\n    }\r\n}\r\n\r\nexport const fetchUser = (user) => {\r\n    return function(dispatch){\r\n        dispatch(fetchLoading())\r\n        axios.get(`https://api.github.com/users/${user}/repos`)\r\n        .then(response => {\r\n            dispatch(fetchSuccess(response))\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchError(error.response.data))\r\n        })\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initState = {\r\n   loading : false, \r\n   datas: [],\r\n   error : null\r\n}\r\n\r\nexport default (state = initState, action) => {\r\n   switch (action.type) {\r\n    case 'FETCH_GITHUB_LOADING':\r\n      return  {\r\n        ...state,\r\n        loading: true,\r\n        error : null\r\n      }\r\n    case 'FETCH_GITHUB_SUCCESS':\r\n      return  {\r\n        loading: false,\r\n        datas : action.payload.data,\r\n        error : null\r\n      }\r\n    case 'FETCH_GITHUB_ERROR':\r\n      return  {\r\n        loading: false,\r\n        datas : [],\r\n        error : action.payload\r\n      }  \r\n    default:\r\n          return state\r\n    }\r\n}","import { combineReducers } from 'redux';\r\nimport githubReducer from './githubReducer';\r\n\r\nexport default combineReducers({\r\n\tgithubReducer,\r\n});","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n// import logger from 'redux-logger';\r\nimport rootReducer from './reducers/rootReducer';\r\nconst middleware = applyMiddleware(thunk);\r\nconst store = createStore(rootReducer, middleware);\r\nexport { store };","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={store}>\n    \t\t<App />\t\n    </Provider>,\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}